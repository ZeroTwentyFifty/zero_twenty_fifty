{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p> ZeroTwentyFifty Corporation <p>     Enabling the exchange of product-level carbon accounting data.      Learn more \u00bb Discussions     \u00b7     Blog     \u00b7     Solutions     \u00b7     Services     \u00b7     Newsletter </p> </p> <p> </p> <p> </p>"},{"location":"#about","title":"About","text":"<p>ZeroTwentyFifty\u2019s repository represents a PACT Conformant  implementation of the WBCSD Partnership for Carbon Transparency (PACT) Pathfinder Protocol.  As a software company dedicated to combating climate change, we build solutions for sharing Scope 3 Product Carbon footprint data. </p> <p>This project is part of our commitment to providing open-source implementations of critical pathway software, enabling organizations of all sizes to collaborate effectively in their sustainability efforts.</p>"},{"location":"#getting-started","title":"Getting Started","text":"<p>\u26a0\ufe0f Caution: While every effort has been made to keep the codebase in a \"green\" state, being an early-stage software project means some components may be unstable. Please note that if you check out the current head, things may be broken. Tagged versions will be maintained in working order.</p>"},{"location":"#1-install-dependencies","title":"1. Install Dependencies","text":"<p>From the root of the repository, run:</p> <pre><code>poetry install\n</code></pre>"},{"location":"#2-install-uvicorn","title":"2. Install Uvicorn","text":"<p>For Ubuntu, install Uvicorn with:</p> <pre><code>sudo apt install uvicorn\n</code></pre>"},{"location":"#3-activate-poetry-shell","title":"3. Activate Poetry Shell","text":"<p>Activate the Poetry environment to access the installed Python dependencies:</p> <pre><code>poetry shell\n</code></pre>"},{"location":"#4-launch-the-development-server","title":"4. Launch the Development Server","text":"<p>Start the local development server with:</p> <pre><code>uvicorn main:app\n</code></pre>"},{"location":"#5-verify-the-launch","title":"5. Verify the Launch","text":"<p>Open your browser and navigate to:</p> <p>http://127.0.0.1:8000/docs</p> <p>To obtain an authentication token, go to the POST /auth/token route and enter a valid username and password in the <code>client_id</code> and <code>client_secret</code> fields. This should return an auth token and confirm that everything is working correctly.</p>"},{"location":"#create-local-postgresql-instance","title":"Create Local PostgreSQL Instance","text":""},{"location":"#1-connect-to-postgresql","title":"1. Connect to PostgreSQL","text":"<p>Connect to your local PostgreSQL instance:</p> <pre><code>psql -d postgres\n</code></pre>"},{"location":"#2-create-the-database","title":"2. Create the Database","text":"<p>Create a database called <code>ztf</code>:</p> <pre><code>CREATE DATABASE ztf;\n</code></pre>"},{"location":"#3-verify-configuration","title":"3. Verify Configuration","text":"<p>Ensure that the values in <code>core/config.py</code> are set correctly for your local development environment:</p> <p>POSTGRES_USER: str = os.getenv(\"PGUSER\", \"username\") POSTGRES_PASSWORD = os.getenv(\"PGPASSWORD\", \"password\") POSTGRES_SERVER: str = os.getenv(\"PGHOST\", \"localhost\") POSTGRES_PORT: str = os.getenv(\"PGPORT\", 5432) # default PostgreSQL port is 5432 POSTGRES_DB: str = os.getenv(\"PGDATABASE\", \"ztf\")</p>"},{"location":"#4-provision-database-tables","title":"4. Provision Database Tables","text":"<p>Run the following command within the Poetry shell to provision the database with tables:</p> <pre><code>uvicorn main:app\n</code></pre> <p>If successful, you should see the database tables inside the <code>ztf</code> database by executing:</p> <pre><code>\\dt\n</code></pre>"},{"location":"#setup-for-local-testing","title":"Setup for Local Testing","text":""},{"location":"#1-create-pytestini","title":"1. Create <code>pytest.ini</code>","text":"<p>Create a file named <code>pytest.ini</code> modeled after the <code>env.template</code> file. Note that this may be handled by dotenv.</p>"},{"location":"#2-run-conformance-tests","title":"2. Run Conformance Tests","text":"<p>By default, conformance tests are excluded from the default pytest run and executed in a separate CI/CD pipeline. To run the conformance tests, use:</p> <pre><code>pytest -m conformance\n</code></pre>"},{"location":"#contact-us","title":"Contact us","text":"<p>If you need help with the software, have questions or queries, or would like to more directly engage ZeroTwentyFifty in work, please reach out to us at: louis@zerotwentyfifty.com</p>"},{"location":"#author","title":"Author","text":"<p>This project was created and is maintained by Louis W. If you have any questions or suggestions, feel free to reach out or open an issue on this repository.</p>"},{"location":"#acknowledgements","title":"Acknowledgements","text":"<p>Thanks to these wonderful people for contributing:</p> <p>Chinwoke Anugwara</p>"},{"location":"MIGRATIONS/","title":"Integrating Database Migrations with Railway's CLI Tool","text":"<p>Here's how you can integrate database migrations with Railway's CLI tool. I'll provide the key steps and concepts, as the exact commands might slightly vary based on your project setup.</p>"},{"location":"MIGRATIONS/#assumptions","title":"Assumptions","text":"<ul> <li>You have your Alembic project structure set up (<code>alembic.ini</code>, migrations directory, etc.).</li> <li>You have a <code>migrate.py</code> script as outlined previously.</li> </ul>"},{"location":"MIGRATIONS/#steps","title":"Steps","text":"<ol> <li> <p>Install the Railway CLI: Follow Railway's documentation on installing their CLI tool.</p> </li> <li> <p>Authenticate the CLI:</p> </li> <li> <p>Run <code>railway login</code> and follow the prompts to authenticate with your Railway account.</p> </li> <li> <p>Link Project:</p> </li> <li> <p>From your project's directory, run <code>railway link</code> to link the current project to the CLI.</p> </li> <li> <p>Custom Migration Commands:</p> </li> <li>Local Migrations: <code>DATABASE_URL=postgresql://postgres:postgres@localhost:5432/postgres python migrate.py</code>       This targets the locally deployed Docker hosted pg instance running.</li> <li>Dev Migrations: <code>railway run --environment development python migrate.py</code>      This targets your development environment and executes the migration script.</li> <li>Production Migrations: <code>railway run --environment production python migrate.py</code>      This targets your production environment.</li> </ol>"},{"location":"MIGRATIONS/#additional-notes","title":"Additional Notes","text":"<ul> <li>Environment Variables: Railway manages environment variables. Ensure your <code>migrate.py</code> script can access the correct database connection strings based on the <code>--environment</code> flag.</li> <li>Deployment Integration: Explore if Railway allows setting up these <code>railway run ...</code> commands as part of your automated deployment process after code updates.</li> <li>Railway Specifics: The Railway CLI might have more specialized features for database migrations. Consult their in-depth documentation.</li> </ul>"},{"location":"MIGRATIONS/#example-usage","title":"Example Usage","text":"<ol> <li>Make changes to your SQLAlchemy models.</li> <li>Generate a new migration: <code>alembic revision --autogenerate -m \"description\"</code></li> <li>Apply to development: <code>railway run --environment development python migrate.py</code></li> <li>Test changes thoroughly in the development environment.</li> <li>Apply to production: <code>railway run --environment production python migrate.py</code></li> </ol> <p>Important: Always test migrations in a staging environment that mirrors production before applying them to your production database.</p>"},{"location":"MIGRATIONS/#resetting-the-database-entirely-in-the-early-stages","title":"Resetting the database entirely in the early stages","text":"<p>Pre beta/having the database models more solidified/normalised, it's probably not a terrible idea to simply wipe the database and start off fresh instead of having migrations that are all over the place. In this case:</p> <ol> <li>Purge the database: This will involve dropping whatever data is in there.</li> <li>Downgrade the database to base: <code>railway run alembic downgrade base</code></li> <li>Make sure the database is where you need it: Just go and eyesight check it via railway. Or, use the local database to test.</li> <li>Delete all of the files in versions: Go into <code>alembic/versions</code> and delete the migration files.</li> <li>Remove the Enums from the database manually: For some reason, they don't get removed by the downgrade base, so you've got to remove them by hand, use the script below.</li> <li>Regenerate the migration: <code>railway run alembic revision --autogenerate -m \"initialise base database structure\"</code></li> <li>Apply the migration: <code>railway run --environment dev python migrate.py</code></li> </ol> <p>Script for removing enums:</p> <pre><code>DROP TYPE productfootprintstatus;\nDROP TYPE declaredunit;\nDROP TYPE characterizationfactors;\nDROP TYPE regionorsubregion;\nDROP TYPE biogenicaccountingmethodology;\nDROP TYPE productorsectorspecificruleoperator;\nDROP TYPE crosssectoralstandard;\n</code></pre> <p>For local development environment:</p> <pre><code>DATABASE_URL=postgresql://postgres:postgres@localhost:5432/postgres alembic downgrade base\nDATABASE_URL=postgresql://postgres:postgres@localhost:5432/postgres alembic revision --autogenerate -m \"initialise base database structure\"\nDATABASE_URL=postgresql://postgres:postgres@localhost:5432/postgres python migrate.py\n</code></pre>"},{"location":"POSTGRES_LOCAL_DOCKER_SETUP/","title":"Local Database Setup","text":"<p>Yes, using Docker for local testing with PostgreSQL can be a great idea, especially as your application grows. It can help you maintain consistency between your local and production environments.</p> <p>The Docker image you mentioned, <code>ghcr.io/railwayapp-templates/timescale-postgis-ssl:pg13-ts2.12</code>, is a good option. It includes PostgreSQL 13, TimescaleDB 2.12, and PostGIS.</p> <p>Here's a basic guide on how to set it up:</p> <ol> <li> <p>Install Docker on your local machine if you haven't already.</p> </li> <li> <p>Create a new directory for your Docker setup and navigate into it.</p> </li> <li> <p>Create a new file called <code>Dockerfile</code> in this directory. This file will contain the instructions for building your Docker image.</p> </li> <li> <p>Open the <code>Dockerfile</code> and add the following content:</p> </li> </ol> <pre><code>FROM ghcr.io/railwayapp-templates/timescale-postgis-ssl:pg13-ts2.12\n\n# Set environment variables\nENV POSTGRES_USER=postgres\nENV POSTGRES_PASSWORD=postgres\nENV POSTGRES_DB=postgres\n\n# Expose the PostgreSQL port\nEXPOSE 5432\n</code></pre> <ol> <li> <p>Save and close the <code>Dockerfile</code>.</p> </li> <li> <p>Now, you can build your Docker image by running the following command in the terminal:</p> </li> </ol> <pre><code>docker build -t my-postgres .\n</code></pre> <ol> <li>Once the image is built, you can run a container from it with the following command:</li> </ol> <pre><code>docker run -d -p 5432:5432 --name my-postgres-container my-postgres\n</code></pre> <ol> <li> <p>This will start a new container based on your Docker image and map the container's port 5432 to your local machine's port 5432.</p> </li> <li> <p>You can now connect to your PostgreSQL database using the connection string <code>postgresql://postgres:postgres@localhost:5432/postgres</code>.</p> </li> <li> <p>To stop the container, use the following command:</p> </li> </ol> <pre><code>docker stop my-postgres-container\n</code></pre> <p>Remember to replace the <code>localhost</code> in the connection string with the appropriate IP address if you're running Docker in a virtual machine or a remote server.</p> <p>This is a basic setup and you may need to adjust it according to your specific requirements. You can also use Docker Compose to manage your Docker containers if you have multiple services that need to be run together.</p>"},{"location":"TESTING_FROM_CLI/","title":"Testing from the CLI","text":"<p>curl --location 'https://localhost:8000/2/auth/token' --header 'Content-Type: application/x-www-form-urlencoded' -d \"grant_type=client_credentials&amp;client_id=${CLIENT_ID}&amp;client_secret=${CLIENT_SECRET}\"</p>"}]}